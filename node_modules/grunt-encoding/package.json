{
  "name": "grunt-encoding",
  "description": "Check character encoding of files using iconv.",
  "version": "0.1.0",
  "homepage": "https://github.com/pigulla/grunt-encoding",
  "author": {
    "name": "Raphael Pigulla",
    "email": "pigulla@four66.com",
    "url": "http://www.n3rd.org"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pigulla/grunt-encoding.git"
  },
  "bugs": {
    "url": "https://github.com/pigulla/grunt-encoding/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pigulla/grunt-encoding/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "encoding",
    "iconv"
  ],
  "dependencies": {
    "async": "~0.2.9",
    "which": "~1.0.5"
  },
  "readme": "# grunt-encoding\n\n> Check character encoding of files using your local installation of `iconv`.\n\nThis plugin may or may not work under Windows (with Cygwin) or Mac OS, feedback is appreciated.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-encoding --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-encoding');\n```\n\n## The \"encoding\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `encoding` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  encoding: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.encoding\nType: `String`\nDefault value: `\"UTF8\"`\n\nThe encoding against which the files will be validated. Keep in mind that this value must be understood by iconv, so `utf8` (in lowercase) is not going to work. To get a list of all available encodings use `iconv --list`.\n\n#### options.iconv\nType: `String`\nDefault value: `null`\n\nIf provided, use this iconv executable rather than whatever `which iconv` returns.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n  encoding: {\n    options: {\n      encoding: 'UTF8'\n    },\n    files: {\n      src: ['src/**/*'],\n    },\n  },\n})\n```\n\n\n## Release History\n0.1.0 (2013/09/13) Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-encoding@0.1.0",
  "dist": {
    "shasum": "e048568af2948175a8bc229304c68ea62564c9cd",
    "tarball": "http://registry.npmjs.org/grunt-encoding/-/grunt-encoding-0.1.0.tgz"
  },
  "_from": "grunt-encoding@~0.1.*",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "pigulla",
    "email": "raphael@pigulla.net"
  },
  "maintainers": [
    {
      "name": "pigulla",
      "email": "raphael@pigulla.net"
    }
  ],
  "directories": {},
  "_shasum": "e048568af2948175a8bc229304c68ea62564c9cd",
  "_resolved": "https://registry.npmjs.org/grunt-encoding/-/grunt-encoding-0.1.0.tgz"
}
